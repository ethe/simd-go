//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

TEXT Â·__validate_ascii_fast(SB), $0-24

    MOVQ buf+0(FP), DI
    MOVQ len+8(FP), SI
    MOVQ res+16(FP), DX

                                 // xor	ecx, ecx
                                 // cmp	rsi, 32
	JB LBB0_1
                                 // lea	rbx, [rsi - 32]
                                 // vpxor	xmm0, xmm0, xmm0
                                 // xor	eax, eax
LBB0_3:
                                 // vpor	ymm0, ymm0, yword [rdi + rax]
                                 // add	rax, 32
                                 // cmp	rax, rbx
	JBE LBB0_3
                                 // vpmovmskb	r8d, ymm0
                                 // cmp	rax, rsi
	JB LBB0_6
	JMP LBB0_17
LBB0_1:
                                 // xor	r8d, r8d
                                 // xor	eax, eax
                                 // cmp	rax, rsi
	JAE LBB0_17
LBB0_6:
                                 // mov	r10, rsi
                                 // sub	r10, rax
                                 // xor	ecx, ecx
                                 // cmp	r10, 32
	JB LBB0_15
                                 // mov	r9, r10
                                 // and	r9, -32
                                 // lea	rbx, [r9 - 32]
                                 // mov	rcx, rbx
                                 // shr	rcx, 5
                                 // inc	rcx
                                 // mov	r11d, ecx
                                 // and	r11d, 1
                                 // test	rbx, rbx
	JE LBB0_8
                                 // lea	rbx, [rax + rdi + 56]
                                 // mov	r14, r11
                                 // sub	r14, rcx
                                 // vpxor	xmm0, xmm0, xmm0
                                 // xor	ecx, ecx
                                 // vpxor	xmm1, xmm1, xmm1
                                 // vpxor	xmm2, xmm2, xmm2
                                 // vpxor	xmm3, xmm3, xmm3
LBB0_10:
                                 // vpmovsxbd	ymm4, qword [rbx + rcx - 56]
                                 // vpor	ymm0, ymm0, ymm4
                                 // vpmovsxbd	ymm4, qword [rbx + rcx - 48]
                                 // vpor	ymm1, ymm1, ymm4
                                 // vpmovsxbd	ymm4, qword [rbx + rcx - 40]
                                 // vpmovsxbd	ymm5, qword [rbx + rcx - 32]
                                 // vpor	ymm2, ymm2, ymm4
                                 // vpor	ymm3, ymm3, ymm5
                                 // vpmovsxbd	ymm4, qword [rbx + rcx - 24]
                                 // vpor	ymm0, ymm0, ymm4
                                 // vpmovsxbd	ymm4, qword [rbx + rcx - 16]
                                 // vpor	ymm1, ymm1, ymm4
                                 // vpmovsxbd	ymm4, qword [rbx + rcx - 8]
                                 // vpmovsxbd	ymm5, qword [rbx + rcx]
                                 // vpor	ymm2, ymm2, ymm4
                                 // vpor	ymm3, ymm3, ymm5
                                 // add	rcx, 64
                                 // add	r14, 2
	JNE LBB0_10
                                 // test	r11, r11
	JE LBB0_13
LBB0_12:
                                 // add	rcx, rax
                                 // vpmovsxbd	ymm4, qword [rdi + rcx + 24]
                                 // vpmovsxbd	ymm5, qword [rdi + rcx + 16]
                                 // vpor	ymm3, ymm3, ymm4
                                 // vpor	ymm2, ymm2, ymm5
                                 // vpmovsxbd	ymm4, qword [rdi + rcx + 8]
                                 // vpor	ymm1, ymm1, ymm4
                                 // vpmovsxbd	ymm4, qword [rdi + rcx]
                                 // vpor	ymm0, ymm0, ymm4
LBB0_13:
                                 // vpor	ymm1, ymm1, ymm3
                                 // vpor	ymm0, ymm0, ymm2
                                 // vpor	ymm0, ymm0, ymm1
                                 // vextracti128	xmm1, ymm0, 1
                                 // vpor	xmm0, xmm0, xmm1
                                 // vpshufd	xmm1, xmm0, 78
                                 // vpor	xmm0, xmm0, xmm1
                                 // vpshufd	xmm1, xmm0, 229
                                 // vpor	xmm0, xmm0, xmm1
                                 // vmovd	ecx, xmm0
                                 // cmp	r10, r9
	JE LBB0_16
                                 // add	rax, r9
LBB0_15:
                                 // movsx	ebx, byte [rdi + rax]
                                 // or	ecx, ebx
                                 // inc	rax
                                 // cmp	rsi, rax
	JNE LBB0_15
LBB0_16:
                                 // and	ecx, 128
LBB0_17:
                                 // xor	eax, eax
                                 // or	ecx, r8d
                                 // sete	al
                                 // mov	qword [rdx], rax
    VZEROUPPER
    RET
LBB0_8:
                                 // vpxor	xmm0, xmm0, xmm0
                                 // xor	ecx, ecx
                                 // vpxor	xmm1, xmm1, xmm1
                                 // vpxor	xmm2, xmm2, xmm2
                                 // vpxor	xmm3, xmm3, xmm3
                                 // test	r11, r11
	JNE LBB0_12
	JMP LBB0_13
