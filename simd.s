//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

TEXT Â·_validate_ascii_fast(SB), $0-24

    MOVQ buf+0(FP), DI
    MOVQ len+8(FP), SI
    MOVQ res+16(FP), DX

    LONG $0xc0effdc5             // vpxor    ymm0, ymm0, ymm0
    WORD $0x3145; BYTE $0xd2     // xor    r10d, r10d
    LONG $0x000000b8; BYTE $0x00 // mov    eax, 0
    LONG $0x20fe8348             // cmp    rsi, 32
	JB LBB0_3
    LONG $0xe04e8d48             // lea    rcx, [rsi - 32]
    LONG $0xc0effdc5             // vpxor    ymm0, ymm0, ymm0
    WORD $0xc031                 // xor    eax, eax
LBB0_2:
    QUAD $0x0000000784ebfdc5; BYTE $0x00 // vpor    ymm0, ymm0, yword [rdi + rax]
    LONG $0x20c08348             // add    rax, 32
    WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JBE LBB0_2
LBB0_3:
    LONG $0xc0d77dc5             // vpmovmskb    r8d, ymm0
    WORD $0x3948; BYTE $0xf0     // cmp    rax, rsi
	JAE LBB0_12
    WORD $0xf189                 // mov    ecx, esi
    WORD $0xc129                 // sub    ecx, eax
    LONG $0xff4e8d4c             // lea    r9, [rsi - 1]
    WORD $0x2949; BYTE $0xc1     // sub    r9, rax
    WORD $0xc1f6; BYTE $0x03     // test    cl, 3
	JE LBB0_5
    WORD $0x8941; BYTE $0xf3     // mov    r11d, esi
    WORD $0x2941; BYTE $0xc3     // sub    r11d, eax
    LONG $0x03e38341             // and    r11d, 3
    WORD $0xf749; BYTE $0xdb     // neg    r11
    WORD $0x3145; BYTE $0xd2     // xor    r10d, r10d
LBB0_7:
    LONG $0x070cb60f             // movzx    ecx, byte ptr [rdi + rax]
    WORD $0x0944; BYTE $0xd1     // or    ecx, r10d
    WORD $0xff48; BYTE $0xc0     // inc    rax
    LONG $0xd1be0f44             // movsx    r10d, cl
    WORD $0xff49; BYTE $0xc3     // inc    r11
	JNE LBB0_7
	JMP LBB0_8
LBB0_5:
    WORD $0x3145; BYTE $0xd2     // xor    r10d, r10d
LBB0_8:
    LONG $0x03f98349             // cmp    r9, 3
	JB LBB0_11
    WORD $0x2948; BYTE $0xc6     // sub    rsi, rax
    LONG $0x38448d48; BYTE $0x03 // lea    rax, [rax + rdi + 3]
LBB0_10:
    LONG $0xfd48b60f             // movzx    ecx, byte ptr [rax - 3]
    WORD $0x0944; BYTE $0xd1     // or    ecx, r10d
    LONG $0x48b60f44; BYTE $0xfe // movzx    r9d, byte ptr [rax - 2]
    LONG $0xff78b60f             // movzx    edi, byte ptr [rax - 1]
    WORD $0x0944; BYTE $0xcf     // or    edi, r9d
    WORD $0xcf09                 // or    edi, ecx
    WORD $0xb60f; BYTE $0x08     // movzx    ecx, byte ptr [rax]
    WORD $0xf909                 // or    ecx, edi
    LONG $0xd1be0f44             // movsx    r10d, cl
    LONG $0x04c08348             // add    rax, 4
    LONG $0xfcc68348             // add    rsi, -4
	JNE LBB0_10
LBB0_11:
    LONG $0x80e28141; WORD $0x0000; BYTE $0x00 // and    r10d, 128
LBB0_12:
    WORD $0x0945; BYTE $0xc2     // or    r10d, r8d
    WORD $0x940f; BYTE $0xc0     // sete    al
    WORD $0xb60f; BYTE $0xc0     // movzx    eax, al
    WORD $0x8948; BYTE $0x02     // mov    qword ptr [rdx], rax
    VZEROUPPER
    RET
